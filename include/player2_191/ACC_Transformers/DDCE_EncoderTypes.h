#ifndef _DDCE_ENCODER_TYPES_H_
#define _DDCE_ENCODER_TYPES_H_

#include "acc_mmedefines.h"
typedef struct
{
	enum eAccBoolean CompOn;
	enum eAccBoolean CompOnSec;
} tMMEDdceConfig;

enum e_MME_AccDdceErrorCode
{
	MME_DDCE_ERROR_AUXDAT_E,
	MME_DDCE_ERROR_DFPE_1,
	MME_DDCE_ERROR_DFPE_2,
	MME_DDCE_ERROR_DFPE_3,
	MME_DDCE_ERROR_EXPSEG,
	MME_DDCE_ERROR_BAIE,
	MME_DDCE_ERROR_GBITA_E,
	MME_DDCE_ERROR_GBA_SUBS,
	MME_DDCE_ERROR_GRPMANTS,
	MME_DDCE_ERROR_PACK_MANTS,
	MME_DDCE_ERROR_FMTEXPS_1,
	MME_DDCE_ERROR_FMTEXPS_2,
	MME_DDCE_ERROR_FMTEXPS_3,
	MME_DDCE_ERROR_MCALL,
	MME_DDCE_ERROR_PK_BITPAC_LJ,
	MME_DDCE_ERROR_PK_BITPAC_RJ,
	MME_DDCE_ERROR_PK_BITPAC_CT,
	MME_DDCE_ERROR_XBITCNT_1,
	MME_DDCE_ERROR_XBITCNT_2,
	MME_DDCE_ERROR_XBITCNT_3,
	MME_DDCE_ERROR_XCALL,
	MME_DDCE_PARSE_INPUT_1,
	MME_DDCE_PARSE_INPUT_2,
	MME_DDCE_INIT_DERIVED,
	MME_DDCE_ERROR_MAX
};
enum e_MME_AccDdceErrorLevel
{
	MME_DDCE_OK = 0,
	MME_DDCE_WARNING = 1,
	MME_DDCE_FATAL =2
};

typedef struct
{
	enum e_MME_AccDdceErrorLevel ErrorLevel;
	enum e_MME_AccDdceErrorCode ErrorCode;

}MME_DdceStatus_t;


#endif //_DDCE_ENCODER_TYPES_H_


